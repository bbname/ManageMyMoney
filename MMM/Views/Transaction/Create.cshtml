@model MMM.ViewModels.TransactionViewModel.TransactionCreateViewModel
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    $(document).ready(function () {
        LoadValidation();
        AddTransactionListener();
        BalanceControl();

        $(function () {
            $("#SetDate").datetimepicker({
                showAnim: 'slideDown',
                oneLine: true,
                dateFormat: 'dd.mm.yy',
                controlType: 'select',
                timeFormat: 'HH:mm'
            });
        });

    });

    function SaveTransaction() {
        //alert('W AJAXIE');
        var viewModel = {
            Name: $('#Name').val().trim(),
            Balance: $('#Balance').val().trim(),
            //AccountBalance: $('#AccountBalance').val().trim(),
            SetDate: $('#SetDate').val().trim(),
            BankAccountId: $('#BankAccountId').val().trim(),
            UserId: $('#UserId').val().trim()
        };

        viewModel.__RequestVerificationToken = $('input[name=__RequestVerificationToken]').val();

        $.ajax({
            url: '@Url.Action("Create", "Transaction")',
            type: 'POST',
            dataType: 'json',
            data: viewModel,
            success: function(dataBack) {
                if (dataBack.status) {
                    $('#Name').val('');
                    $('#Balance').val('');
                    $('#AccountBalance').val('');
                    $('#SetDate').val('');
                    var transactionsDiv = $('#TransactionsList');
                    LoadTransactions(transactionsDiv);
                }  
            },
            error: function() {
                alert('Coś poszło nie tak przy wpisywaniu transakcji do bazy danych.')
            }
        });

    }

    function AddTransactionListener() {
        $("#ModalContent").on('click', '#AddTransactionBtn', function (e) {
            e.preventDefault();
            AddTransaction();
        });
    }

    function AddTransaction() {
        var button = $('#AddTransactionBtn');
        if (!(AreFieldsFilled())) {
            button.attr('data-dismiss', '');
            ValidationMessage();
            // alert("Nie wypełnione");
        }
        else {
            if (!(button.attr('data-dismiss').length > 0)) {
                button.attr('data-dismiss', 'modal');
                //alert("Wypełnione");
            }
            SaveTransaction();
        }
    }

    function AreFieldsFilled() {
        var valueToReturn = false;
        //var collectionOfInputs = $('#InputsToEdit :input');
        $('#InputsToEdit :input').each(function() {
            var element = $(this);
            if (!(element.val().length > 0)) {
                //alert('- ' + element.val().length);
                valueToReturn = false;
                return false;
            }
            else {
                //alert(element.val().length);
                valueToReturn = true;
            }
        });
        return valueToReturn;
    }

    function LoadValidation() {
        $('#ModalContent').change(function () {
            $.validator.unobtrusive.parse("#ModalCreateTransaction");
        });
        //$('#ModalContent').change(function () {
        //    $.validator.unobtrusive.parse("#ModalCreateTransaction");
        //});
    }

    function ValidationMessage() {
        var validationDiv = $('#ValidationInfo');
        // 1 cuz of button
        if (!(validationDiv.has('#ValidationInfoSpan').length > 0)) {
            validationDiv.prepend("<span id='ValidationInfoSpan' class='col-xs-6 col-md-6 text-danger'> Uzupełnij wszystkie pola!</span>");
        }
    }

    function BalanceControl() {
        var balance = $('#Balance');
        var onlyIntsRegExp = new RegExp('^(-?)[0-9]+$');
        balance.change(function () {
            if (onlyIntsRegExp.test(balance.val())) {
                balance.val(balance.val() + ",00");
            }
            else if (balance.val().indexOf('.') !== -1) {
                balance.val(balance.val().replace('.', ','));
            }
            else {
                balance.val();
            }
        });
    }
</script>
<div class="modal-content" id="ModalContent">
    @using (Html.BeginForm("Create", "Transaction", FormMethod.Post, new { role="form", id="ModalCreateTransaction"}))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="modal-header">
                <button class="close" type="button" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Utwórz transakcję</h4>
            </div>
            <div class="modal-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div id="InputsToEdit">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Balance, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Balance, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Balance, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.AccountBalance, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @*@Html.EditorFor(model => model.AccountBalance, new { htmlAttributes = new { @class = "form-control" } })*@
                        @Html.ValidationMessageFor(model => model.AccountBalance, "", new { @class = "text-danger" })
                    </div>
                </div>          

                <div class="form-group">
                    @Html.LabelFor(model => model.SetDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input id="SetDate" name="SetDate" type="text" class="form-control" style="cursor: pointer;" data-val="true" data-val-required="Pole Data jest wymagane." />
                        @Html.ValidationMessageFor(model => model.SetDate, "", new {@class = "text-danger"})
                    </div>
                </div>
                </div>
                @*<div class="form-group">
                                @Html.LabelFor(model => model.Currency, htmlAttributes: new {@class = "control-label col-md-2"})
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Currency, new {htmlAttributes = new {@class = "form-control"}})
                                    @Html.ValidationMessageFor(model => model.Currency, "", new {@class = "text-danger"})
                                </div>
                            </div>*@
                @Html.HiddenFor(m => m.BankAccountId)
                @Html.HiddenFor(m => m.UserId)
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10" id="ValidationInfo">
                        <button class="btn btn-success" type="submit" data-dismiss="modal" id="AddTransactionBtn"><span class="glyphicon glyphicon-plus"></span> Dodaj</button>
                    </div>
                </div>
            </div>
        </div>
    }

</div>
