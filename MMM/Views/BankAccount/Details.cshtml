@using Microsoft.AspNet.Identity
@model MMM.ViewModels.BankAccountViewModel.BankAccountDetailsViewModel

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

@{
    ViewBag.Title = "Details and Transactions";
}
<script type="text/javascript">
    $(document).ready(function () {
        var transactionsDiv = $('#TransactionsList');
        LoadTransactions(transactionsDiv);
        LoadTransactionsFiltersListener(transactionsDiv);
        DateFromToFilterListener(transactionsDiv);
        ClearDateFromToInputsListener();
        //TransactionAddOpenModalListener();
        $bankAccountId = '@Model.Id';

        $(function () {
            $("#FromDate").datetimepicker({
                showAnim: 'slideDown',
                oneLine: true,
                dateFormat: 'dd.mm.yy',
                controlType: 'select',
                showTimepicker: false
            });
        });

        $(function () {
            $("#ToDate").datetimepicker({
                showAnim: 'slideDown',
                oneLine: true,
                dateFormat: 'dd.mm.yy',
                controlType: 'select',
                showTimepicker: false
            });
        });

    });

    function EditBankAccountBalance(accountBalance) {
        SaveChangedBankAccountBalance(accountBalance);
    }

    function SaveChangedBankAccountBalance(accountBalance) {
        $.ajax({
            url: '@Url.Action("UpdateBankAccountBalance", "BankAccount")',
            type: 'POST',
            data: {
                id: $bankAccountId,
                userId: '@User.Identity.GetUserId()',
                balance: accountBalance
            },
            success: function(dataBack) {
                if (dataBack.status) {
                    $('#BankAccountBalance').effect("highlight", 10000);
                    $('#BankAccountBalance').text(accountBalance);
                }
            },
            error: function() {
                alert('Coś poszło nie tak przy updateowaniu salda konta.');
            }
        });
    }

    function LoadTransactions(outputDiv) {
        outputDiv.wrap("<div id='TransactionListLoad'></div>");
        var loader = $('#TransactionListLoad');
        outputDiv.css('opacity', '0.0');
        loader.addClass("loader col-xs-offset-6 col-sm-offset-6 col-md-offset-6");
        $.get(
            '@Url.Action("GetTransactionsByBankAccountId", "Transaction", new {@bankAccountId = Model.Id})',
            function (data) {
                loader.removeClass("loader col-xs-offset-6 col-sm-offset-6 col-md-offset-6");
                outputDiv.unwrap();
                outputDiv.css('opacity', '1.0');
                outputDiv.html(data);
            });
    }

    function ClearDateFromToInputsListener() {
        $('#TransactionListFilters').on('click',
            '#ClearFromToDateBtn',
            function() {
                ClearDateFromToInputs();
            });
    }

    function ClearDateFromToInputs() {
        $('#FromDate').val('');
        $('#ToDate').val('');
    }

    function DateFromToFilterListener(outputDiv) {
        $('#TransactionListFilters').on('change',
            '#FromDate, #ToDate',
            function () {
                DateFromToCheck(outputDiv);
            });
    }

    function DateFromToCheck(outputDiv) {
        var dateFrom = $('#FromDate');
        var dateTo = $('#ToDate');

        if (dateFrom.val() && dateTo.val()) {
            LoadTransactionsFilters(outputDiv);
        }
    }

    function LoadTransactionsFiltersListener(outputDiv) {
        $('#TransactionListFilters').on('change',
            '#SelectedItemsForPageId, #SelectedFilterId',
            function () {
                LoadTransactionsFilters(outputDiv);
            });
    }

    function LoadTransactionsFilters(outputDiv) {
        outputDiv.wrap("<div id='TransactionListLoad'></div>");
        var loader = $('#TransactionListLoad');
        outputDiv.css('opacity', '0.0');
        loader.addClass("loader col-xs-offset-6 col-sm-offset-6 col-md-offset-6");
        $.ajax({
            url: '@Url.Action("GetTransactionsByBankAccountIdFilters", "Transaction")',
            type: 'GET',
            data: {
                bankAccountId: '@Model.Id',
                toDate: $('#ToDate').val().trim(),
                fromDate: $('#FromDate').val().trim(),
                selectedItemsForPage: $('#SelectedItemsForPageId').val().trim(),
                selectedFilterId: $('#SelectedFilterId').val().trim()
            },
            success: function(dataBack) {
                loader.removeClass("loader col-xs-offset-6 col-sm-offset-6 col-md-offset-6");
                outputDiv.unwrap();
                outputDiv.css('opacity', '1.0');
                outputDiv.html(dataBack);
            },
            error: function() {
                alert('Coś poszło nie tak przy pobieraniu danych poprzez filtry.');
            }
        });
    }

    @*function TransactionAddOpenModalListener() {
        $('#TransactionListFilters').on('click',
            '#CreateTransaction',
            function () {
                GetTransactionDataCreate();
            });
    }

    function GetTransactionDataCreate() {
        alert($('#BankAccountBalance').html() + '  ' + $('#BankAccountCurrency').html().trim());

        $.ajax({
            url: '@Url.Action("Create", "Transaction")',
            type: 'GET',
            data: {
                bankAccountId: $bankAccountId,
                userId: '@Model.User.Id',
                accountBalance: $('#BankAccountBalance').html(),
                currency: $('#BankAccountCurrency').html().trim()
            },
            success: function (dataBack) {
                LoadDataIntoModalAndOpen(dataBack);
            },
            error: function() {
                alert("Coś poszło nie tak przy generowaniu modelu dodawania transakcji.");
            }
        });
    }

    function LoadDataIntoModalAndOpen(data) {
        $('#ModalCreateTransaction .modal-dialog').html(data);
        //$('#ModalCreateTransaction').modal('show');
    }*@

</script>

<h2>Konto</h2>

<div>
    <hr />
    <dl class="dl-horizontal h4">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Balance)
        </dt>

        <dd id="BankAccountBalance">
            @Html.DisplayFor(model => model.Balance)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Currency)
        </dt>

        <dd id="BankAccountCurrency">
            @Html.DisplayFor(model => model.Currency)
        </dd>
    </dl>
</div>
<div>
    <a href="@Url.Action("Index")" class="btn btn-primary" style="margin-bottom: 15px;">
        <span class="glyphicon glyphicon-arrow-left" aria-hidden="true"></span>
        Wróć do listy
    </a>
    <a href="@Url.Action("Edit", new {id = Model.Id})" class="btn btn-warning" style="margin-bottom: 15px;">
        <span class="glyphicon glyphicon-pencil" aria-hidden="true"></span>
        Edytuj
    </a>
    <a href="@Url.Action("Delete", new {id = Model.Id})" class="btn btn-danger" style="margin-bottom: 15px;">
        <span class="glyphicon glyphicon-remove"></span>
        Usuń
    </a>
</div>
<hr/>
<h2>Transakcje</h2>
<hr />
<div class="row" id="TransactionListFilters">
    <div class="col-xs-12 col-sm-2 col-md-2 form-group">
        <button type="button" id="CreateTransaction" class="btn btn-success" style="margin-bottom: 15px;" data-toggle="modal" data-target="#ModalCreateTransaction"><span class="glyphicon glyphicon-plus"></span> Dodaj</button>
    </div>
    <div class="col-xs-12 col-sm-2 col-md-2 form-group">
        @Html.Label("Na stronę:")
        @Html.DropDownListFor(m => m.SelectedItemsForPageId, Model.ItemsForPage, new {@class = "form-control"})
        @Html.ValidationMessageFor(model => model.SelectedItemsForPageId, "", new {@class = "text-danger"})
    </div>
    @*<div class="col-xs-12 col-sm-5 col-md-5 form-group">*@
        <div class="col-xs-12 col-sm-3 col-md-3 form-group">
            @Html.DropDownListFor(m => m.SelectedFilterId, Model.FiltersForWeb, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SelectedFilterId, "", new { @class = "text-danger" })
        </div>
    @*<div class="col-sm-offset-5 col-sm-5 col-md-offset-5 col-md-5 col-xs-12">*@
    <div class=" col-xs-12 col-sm-5 col-md-5">
        <input id="FromDate" name="FromDate" class="form-control form-group transaction-date-filter" type="text" placeholder="Data od" />
        <input id="ToDate" name="ToDate" class="form-control form-group transaction-date-filter" type="text" placeholder="Data do" />
        <button type="button" class="btn btn-default" id="ClearFromToDateBtn" style="margin-bottom: 15px;">
            <span class="glyphicon glyphicon-calendar"></span> Wyczyść
        </button>
    </div>
</div>

<hr />
<div class="modal fade" id="ModalCreateTransaction" role="dialog">
    <div class="modal-dialog">
        @{ Html.RenderAction("Create", "Transaction", new { bankAccountId = Model.Id, userId = Model.User.Id, accountBalance = Model.Balance, currency = Model.Currency });}
    </div>
</div>
<div class="modal fade" id="ModalDeleteTransaction" role="dialog">
    <div class="modal-dialog">
    </div>
</div>
<div class="modal fade" id="ModalEditTransaction" role="dialog">
    <div class="modal-dialog">
    </div>
</div>
<div class="row" id="TransactionsList">

</div>

